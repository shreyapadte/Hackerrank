import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution 
{
    static int[] acmTeam(String[] topic) 
    {
        int n = topic.length;
        int max=0,count=0,bcount=0;
        BigInteger[] b = new BigInteger[n];

        for(int i=0;i<n;i++)
        {
            b[i] = new BigInteger(topic[i],2);
        }
        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                BigInteger bij = b[i].or(b[j]);
                bcount = bij.bitCount();
                if(bcount > max)
                {
                    max = bcount;
                    count=1;
                }
                else if(bcount == max)
                {
                    count++;
                }
            }
        }
        int[] answer = {max,count};
        return answer;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] nm = scanner.nextLine().split(" ");

        int n = Integer.parseInt(nm[0]);

        int m = Integer.parseInt(nm[1]);

        String[] topic = new String[n];

        for (int i = 0; i < n; i++) {
            String topicItem = scanner.nextLine();
            topic[i] = topicItem;
        }

        int[] result = acmTeam(topic);

        for (int i = 0; i < result.length; i++) {
            bufferedWriter.write(String.valueOf(result[i]));

            if (i != result.length - 1) {
                bufferedWriter.write("\n");
            }
        }

        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
